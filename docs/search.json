[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Sermet Pekin sermetpekin@gmail.com Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sermet Pekin. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pekin S (2024). vyos: Interface Multiple Data Providers 'EDDS' 'FRED'. R package version 1.0.3, https://spvyos.github.io/vyos/, https://github.com/spvyos/vyos.","code":"@Manual{,   title = {vyos: Interface for Multiple Data Providers 'EDDS' and 'FRED'},   author = {Sermet Pekin},   year = {2024},   note = {R package version 1.0.3, https://spvyos.github.io/vyos/},   url = {https://github.com/spvyos/vyos}, }"},{"path":[]},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Interface for Multiple Data Providers EDDS and FRED","text":"vyos package interface make requests data providers. Current version able connect APIs EDDS CBRT (Central Bank Republic Türkiye) FRED API FED (Federal Reserve Bank).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface for Multiple Data Providers EDDS and FRED","text":"can install package CRAN using:","code":"install.packages(\"vyos\")"},{"path":"/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Interface for Multiple Data Providers EDDS and FRED","text":"can install development version GitHub:","code":"library(devtools) install_github(\"spvyos/vyos\")"},{"path":[]},{"path":"/index.html","id":"set_api_key","dir":"","previous_headings":"Usage","what":"set_api_key","title":"Interface for Multiple Data Providers EDDS and FRED","text":"","code":"# Set API keys for EDDS set_api_key(\"YOUR_EDDS_API_KEY\", \"evds\", \"env\") # Set API keys for FRED set_api_key(\"YOUR_FRED_API_KEY\", \"fred\", \"env\") # Alternatively, you can use file-based configuration set_api_key(\"YOUR_EDDS_API_KEY\", \"evds\", \"file\") set_api_key(\"YOUR_FRED_API_KEY\", \"fred\", \"file\")"},{"path":"/index.html","id":"get_series","dir":"","previous_headings":"Usage","what":"get_series","title":"Interface for Multiple Data Providers EDDS and FRED","text":"Example 1: Explicit Sources Example 2: Index-based Definition index-based definition, package automatically figure source base provided indexes.","code":"# Define a template for series with explicit sources template <- \"     UNRATE        #fred (series)     bie_abreserv  #evds (table)     TP.AB.B1      #evds (series) \" # Define a template for series with indexes template <- \"     UNRATE              bie_abreserv       TP.AB.B1       \" # Fetch data based on the template obj <- get_series(template, start_date = \"2012/05/22\", cache = FALSE)  # Display the results print(obj)  ======================================vyos_GETPREP=======   status      : completed   index       :      UNRATE        #fred (series)     bie_abreserv  #evds (table)     TP.AB.B1      #evds (series)    start_date  : 2012/05/22   end_date    : 2100-01-01   status [completed]   lines$data ===================  ! each line corresponds to a different set of func and data     data can be reached as below         --> obj$lines$data   # A tibble: 3 × 8   index        source base   comments      freq  fnc_str         fnc          data                 <chr>        <chr>  <chr>  <chr>         <chr> <chr>           <named list> <list>             1 UNRATE       fred   series fred (series) null  fred_series_fnc <fn>         <tibble [139 × 2]> 2 bie_abreserv evds   table  evds (table)  null  evds_table_fnc  <fn>         <tibble [138 × 6]> 3 TP.AB.B1     evds   series evds (series) null  evds_series_fnc <fn>         <tibble [138 × 2]>  data ===================   (combined) data      a combined data frame will be constructed     combined data can be reached as         --> obj$data   # A tibble: 138 × 8    date       UNRATE TP_AB_B1 TP_AB_B2 TP_AB_B3 TP_AB_B4 TP_AB_B6 TP.AB.B1    <date>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>  1 2012-06-01    8.2   12438.   83062.   17704.   95500.  113204.   12438.  2 2012-07-01    8.2   15068.   85044.   17526.  100113.  117639.   15068.  3 2012-08-01    8.1   15706.   93006.   16191.  108712.  124903.   15706.  4 2012-09-01    7.8   17289.   94797    16106.  112086.  128192    17289.  5 2012-10-01    7.8   17675.   99534.   14575.  117208.  131783.   17675.  6 2012-11-01    7.7   18200.  100162.   15532.  118362.  133894.   18200.  7 2012-12-01    7.9   19235.   99933.   18326.  119168.  137493    19235.  8 2013-01-01    8     19860.  104349.   15466.  124210.  139676    19860.  9 2013-02-01    7.7   19204.  104023.   14783.  123227.  138010.   19204. 10 2013-03-01    7.5   21037.  105658.   15164.  126695.  141859.   21037. # ℹ 128 more rows # ℹ Use `print(n = ...)` to see more rows  ========================================================="},{"path":"/index.html","id":"additional-usage-examples","dir":"","previous_headings":"Usage","what":"Additional Usage Examples","title":"Interface for Multiple Data Providers EDDS and FRED","text":"","code":"# Fetch data for a specific index o <- get_series(\"bie_yssk\", start_date = \"2010-01-01\") print(o)  # Fetch data for multiple indexes using a vector or template index_vector <- c(\"TP_YSSK_A1\", \"TP_YSSK_A2\") o <- get_series(index_vector) print(o)  # Remove NA values from the data frame df_raw <- o$data df <- remove_na_safe(df_raw) print(df)  # Create a lagged data frame df2 <- lag_df(df, list(TP_YSSK_A1 = 1:3, TP_YSSK_A2 = 1:6)) print(df2) o <- get_series(\"bie_yssk\" , start_date = \"2010-01-01\") o # ======================================vyos_GETPREP======= #     status      : completed # index       : bie_yssk # start_date  : 2010-01-01 # end_date    : 2100-01-01 # ................... resolved [completed] .............. #  # .................................. # .........> lines   ............. # .................................. # # each line corresponds to a different set of func and data # data can be reached as below > obj$lines$data # # A tibble: 1 × 8 # index    source base  comments freq  fnc_str        fnc          data               # <chr>    <chr>  <chr> <chr>    <chr> <chr>          <named list> <list>             #     1 bie_yssk evds   table \" \"      null  evds_table_fnc <fn>         <tibble [167 × 7]> #     .................................. # .........> (combined) data ... # .................................. # a combined data frame will be constructed # combined data can be reached as > obj$data # # A tibble: 167 × 7 # date       TP_YSSK_A1 TP_YSSK_A2 TP_YSSK_A3 TP_YSSK_A4 TP_YSSK_A5 TP_YSSK_A6 # <date>          <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #     1 2010-01-01       7928       6126       5020       5644      51100      75818 # 2 2010-02-01       7619       6030       4911       5521      50088      74168 # 3 2010-03-01       7517       5998       4920       5534      49625      73595 # 4 2010-04-01       7333       5822       4859       5435      49360      72809 # 5 2010-05-01       7136       5510       4922       5266      48108      70942 # 6 2010-06-01       6906       5257       4449       5277      47464      69353 # 7 2010-07-01       6836       5363       4445       5396      49051      71092 # 8 2010-08-01       6758       5291       4411       5281      48407      70148 # 9 2010-09-01       6799       5200       4411       5375      50099      71885 # 10 2010-10-01       6770       5094       4324       5358      51091      72637 # # ℹ 157 more rows # # ℹ Use print(n = ...) to see more rows # ........................................................... #  # ========================================================="},{"path":"/index.html","id":"indexes-can-be-given-as-a-vector-or-a-string-template","dir":"","previous_headings":"Usage","what":"indexes can be given as a vector or a string template","title":"Interface for Multiple Data Providers EDDS and FRED","text":"Accessing Combined Lines Data Frames retrieved data using defined series, can access combined data frame lines data frame using following structures: structure allows easily navigate object access specific data frames.","code":"index_vector  = c( \"TP_YSSK_A1\" , \"TP_YSSK_A2\" ) # or as a template it gives same result  index_template <- \" TP_YSSK_A1 TP_YSSK_A2 \"  o <- get_series(index_vector ) o  o <- get_series(index_template ) o # Access the combined data frame combined_data <- obj$data  # Access the 'lines' data frame lines_data <- obj$lines df_raw <- o$data  df_raw # # A tibble: 287 × 3 # date       TP_YSSK_A1 TP_YSSK_A2 # <date>          <dbl>      <dbl> #     1 2000-01-01         NA         NA # 2 2000-02-01         NA         NA # 3 2000-03-01         NA         NA # 4 2000-04-01         NA         NA # 5 2000-05-01         NA         NA # 6 2000-06-01         NA         NA # 7 2000-07-01         NA         NA # 8 2000-08-01         NA         NA # 9 2000-09-01         NA         NA # 10 2000-10-01         NA         NA # # ℹ 277 more rows # # ℹ Use `print(n = ...)` to see more rows"},{"path":"/index.html","id":"remove_na_safe","dir":"","previous_headings":"Usage","what":"remove_na_safe","title":"Interface for Multiple Data Providers EDDS and FRED","text":"function removes rows ends data frame identifies row columns non-NA values. process involves two steps: Trimming Beginning: starts beginning removes rows encounters row complete data columns. Trimming End: initial trimming, proceeds remove rows end data frame, eliminating rows least one NA value column, reaches row columns contain non-NA values. process stops finds row columns contain non-NA values, resulting data frame returned.","code":""},{"path":"/index.html","id":"usage-1","dir":"","previous_headings":"Usage > remove_na_safe","what":"Usage:","title":"Interface for Multiple Data Providers EDDS and FRED","text":"example, function remove_na_safe applied example_data data frame. resulting cleaned_data rows removed ends row non-NA values columns reached.","code":"# Example data frame example_data <- data.frame(   A = c(1, 2, 3, NA, 5),   B = c(NA, 2, 3, 4, 5),   C = c(1, 2, 3, 4, 5) )  # Remove NA values from both ends cleaned_data <- remove_na_safe(example_data)  # View the cleaned data frame print(cleaned_data) df <- remove_na_safe(df_raw ) df  # # A tibble: 263 × 3 # date       TP_YSSK_A1 TP_YSSK_A2 # <date>          <dbl>      <dbl> #     1 2002-01-01       2673       1197 # 2 2002-02-01       3235       1262 # 3 2002-03-01       3561       1432 # 4 2002-04-01       3872       1525 # 5 2002-05-01       4124       1642 # 6 2002-06-01       4432       1748 # 7 2002-07-01       4823       1841 # 8 2002-08-01       4903       1732 # 9 2002-09-01       5155       1706 # 10 2002-10-01       5066       1709 # # ℹ 253 more rows # ℹ Use `print(n = ...)` to see more rows"},{"path":"/index.html","id":"lag_df","dir":"","previous_headings":"Usage","what":"lag_df","title":"Interface for Multiple Data Providers EDDS and FRED","text":"lag_df function creates additional columns based list column names lag sequences. feature beneficial scenarios need varying lag selections certain columns, allowing flexibility specifying different lags different columns opting lag .","code":""},{"path":"/index.html","id":"usage-example","dir":"","previous_headings":"Usage > lag_df","what":"Usage Example:","title":"Interface for Multiple Data Providers EDDS and FRED","text":"example, lag_df function applied example_data data frame specified columns (b) corresponding lag sequences (1:3 1:6). resulting lagged_data additional columns representing specified lags. get_series function require source names IDs. function uses hints figure sources request index IDs given. Accessing Individual Data Frames retrieved data using defined series, individual data frames can accessed using following structure: structure allows navigate object access specific data frames.","code":"# Example data frame example_data <- data.frame(   a = c(10, 20, 30, 40, 50),   b = c(100, 200, 300, 400, 500) )  # Applying lag_df function with specified lag sequences lagged_data <- lag_df(example_data, list(a = 1:3, b = 1:2))  # View the lagged data frame print(lagged_data)  # A tibble: 5 × 7       a     b a_lag_1 a_lag_2 a_lag_3 b_lag_1 b_lag_2   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> 1    10   100      NA      NA      NA      NA      NA 2    20   200      10      NA      NA     100      NA 3    30   300      20      10      NA     200     100 4    40   400      30      20      10     300     200 5    50   500      40      30      20     400     300 df2 <- lag_df( df , list( TP_YSSK_A1 = 1 : 3 , TP_YSSK_A2 = 1 : 6 ) ) df2 # # A tibble: 263 × 12 # date       TP_YSSK_A1 TP_YSSK_A2 TP_YSSK_A1_lag_1 TP_YSSK_A1_lag_2 TP_YSSK_A1_lag_3 TP_YSSK_A2_lag_1 TP_YSSK_A2_lag_2 # <date>          <dbl>      <dbl>            <dbl>            <dbl>            <dbl>            <dbl>            <dbl> #     1 2002-01-01       2673       1197               NA               NA               NA               NA               NA # 2 2002-02-01       3235       1262             2673               NA               NA             1197               NA # 3 2002-03-01       3561       1432             3235             2673               NA             1262             1197 # 4 2002-04-01       3872       1525             3561             3235             2673             1432             1262 # 5 2002-05-01       4124       1642             3872             3561             3235             1525             1432 # 6 2002-06-01       4432       1748             4124             3872             3561             1642             1525 # 7 2002-07-01       4823       1841             4432             4124             3872             1748             1642 # 8 2002-08-01       4903       1732             4823             4432             4124             1841             1748 # 9 2002-09-01       5155       1706             4903             4823             4432             1732             1841 # 10 2002-10-01       5066       1709             5155             4903             4823             1706             1732 # # ℹ 253 more rows # # ℹ 4 more variables: TP_YSSK_A2_lag_3 <dbl>, TP_YSSK_A2_lag_4 <dbl>, TP_YSSK_A2_lag_5 <dbl>, TP_YSSK_A2_lag_6 <dbl> # # ℹ Use `print(n = ...)` to see more rows index_template <- \" TP_YSSK_A1 TP_YSSK_A2 UNRATE \"  o <- get_series(index_template ) o your_data <- object$lines$data > o$lines # # A tibble: 3 × 8 #   index        source base   comments      freq  fnc_str         fnc          data               #   <chr>        <chr>  <chr>  <chr>         <chr> <chr>           <named list> <list>             # 1 UNRATE       fred   series fred (series) null  fred_series_fnc <fn>         <tibble [228 × 2]> # 2 bie_abreserv evds   table  evds (table)  null  evds_table_fnc  <fn>         <tibble [287 × 6]> # 3 TP.AB.B1     evds   series evds (series) null  evds_series_fnc <fn>         <tibble [287 × 2]> > o$lines$data # [[1]] # # A tibble: 228 × 2 #    date       UNRATE #    <date>      <dbl> #  1 2005-01-01    5.3 #  2 2005-02-01    5.4 #  3 2005-03-01    5.2 #  4 2005-04-01    5.2 #  5 2005-05-01    5.1 #  6 2005-06-01    5   #  7 2005-07-01    5   #  8 2005-08-01    4.9 #  9 2005-09-01    5   # 10 2005-10-01    5   # # ℹ 218 more rows # # ℹ Use `print(n = ...)` to see more rows #  # [[2]] # # A tibble: 287 × 6 #    date       TP_AB_B1 TP_AB_B2 TP_AB_B3 TP_AB_B4 TP_AB_B6 #    <date>        <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #  1 2000-01-01    1011    22859.    8943.   23870.   32812. #  2 2000-02-01    1011    22907.    8296.   23918.   32214. #  3 2000-03-01    1011.   22926.    9817.   23937.   33754. #  4 2000-04-01    1011.   22337     8579.   23348.   31926. #  5 2000-05-01    1011.   22950.    8451.   23961.   32412. #  6 2000-06-01    1011.   24547.    9270.   25558.   34827. #  7 2000-07-01    1010.   24477.   10575.   25487    36062. #  8 2000-08-01    1033    24457    10146.   25490    35636. #  9 2000-09-01    1025    24160    10715.   25185    35900. # 10 2000-10-01     988    23593     9970.   24581    34551. # # ℹ 277 more rows # # ℹ Use `print(n = ...)` to see more rows #  # [[3]] # # A tibble: 287 × 2 #    date       TP.AB.B1 #    <date>        <dbl> #  1 2000-01-01    1011  #  2 2000-02-01    1011  #  3 2000-03-01    1011. #  4 2000-04-01    1011. #  5 2000-05-01    1011. #  6 2000-06-01    1011. #  7 2000-07-01    1010. #  8 2000-08-01    1033  #  9 2000-09-01    1025  # 10 2000-10-01     988  # # ℹ 277 more rows # # ℹ Use `print(n = ...)` to see more rows"},{"path":"/index.html","id":"excel-export","dir":"","previous_headings":"Usage","what":"Excel export","title":"Interface for Multiple Data Providers EDDS and FRED","text":"creates excel file including data frames object","code":"# Export data frames to an Excel file obj <- get_series( index = template_test() ) excel(obj, \"file_name.xlsx\", \"somefolder\")"},{"path":"/index.html","id":"getting-api-keys","dir":"","previous_headings":"","what":"Getting API Keys","title":"Interface for Multiple Data Providers EDDS and FRED","text":"access data EDDS (CBRT) FRED (FED), users need obtain API keys creating accounts respective websites.","code":""},{"path":"/index.html","id":"edds-cbrt-api-key","dir":"","previous_headings":"Getting API Keys","what":"EDDS (CBRT) API Key","title":"Interface for Multiple Data Providers EDDS and FRED","text":"Visit EDDS (CBRT) API Documentation. Create account EDDS website don’t one. Follow documentation generate API key.","code":""},{"path":"/index.html","id":"fred-fed-api-key","dir":"","previous_headings":"Getting API Keys","what":"FRED (FED) API Key","title":"Interface for Multiple Data Providers EDDS and FRED","text":"Go FRED (FED) API Key Documentation. Create account FRED website haven’t done already. Follow documentation obtain FRED API key. Make sure securely store API keys never expose public repositories.","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"Getting API Keys","what":"Contributing","title":"Interface for Multiple Data Providers EDDS and FRED","text":"find issues suggestions improvement, feel free open issue submit pull request GitHub.","code":""},{"path":"/reference/change_cache_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the cache folder or changes it if it was already set to save caches. — change_cache_folder","title":"Sets the cache folder or changes it if it was already set to save caches. — change_cache_folder","text":"Sets cache folder changes already set save caches.","code":""},{"path":"/reference/change_cache_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the cache folder or changes it if it was already set to save caches. — change_cache_folder","text":"","code":"change_cache_folder(folder = null, verbose = FALSE)"},{"path":"/reference/change_cache_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the cache folder or changes it if it was already set to save caches. — change_cache_folder","text":"folder Folder set cache folder. default value NULL, triggers check_users_choice_if_cache function provides options user use cache folder, temporary one, disable caching. verbose Boolean. TRUE, provides information cache folder set. Otherwise, prints warning error.","code":""},{"path":"/reference/change_cache_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the cache folder or changes it if it was already set to save caches. — change_cache_folder","text":"return value, called side effects","code":""},{"path":"/reference/change_cache_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the cache folder or changes it if it was already set to save caches. — change_cache_folder","text":"","code":"change_cache_folder(\"my_cache_folder\", verbose = TRUE) #> cache folder was set [my_cache_folder]"},{"path":"/reference/excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an excel file from a data.frame or a list of data.frame or from\nvyos_GETPREP object. — excel","title":"Creates an excel file from a data.frame or a list of data.frame or from\nvyos_GETPREP object. — excel","text":"excel() function creates excel file according object given. data.frame List data frame vyos_GETPREP object can passed..","code":""},{"path":"/reference/excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an excel file from a data.frame or a list of data.frame or from\nvyos_GETPREP object. — excel","text":"","code":"excel(   dfs = null,   file_name = null,   folder = null,   .debug = FALSE,   env = rlang::caller_env(),   ... )"},{"path":"/reference/excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an excel file from a data.frame or a list of data.frame or from\nvyos_GETPREP object. — excel","text":"dfs object list data frame write file_name file name save folder folder save file .debug internal use env environment ... future versions","code":""},{"path":"/reference/excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an excel file from a data.frame or a list of data.frame or from\nvyos_GETPREP object. — excel","text":"returns object list data frame back","code":""},{"path":"/reference/excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an excel file from a data.frame or a list of data.frame or from\nvyos_GETPREP object. — excel","text":"","code":"if (FALSE) { excel(data.frame(a = 1:3), file_name = \"test1.xlsx\", folder = \".\") }"},{"path":"/reference/get_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Requests data from multiple data sources. — get_series","title":"Requests data from multiple data sources. — get_series","text":"get_series() function retrieves data various sources, including EDDS API FRED API version. multiple indexes provided character vector string template, function individually requests item corresponding sources, discerning source item's format. function combines data frames common frequencies returns combined data frame individual data frames requested item.","code":""},{"path":"/reference/get_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Requests data from multiple data sources. — get_series","text":"","code":"get_series(   index = NULL,   start_date = default_start_date(),   end_date = default_end_date(),   freq = NULL,   cache = FALSE,   na.remove = TRUE,   verbose = NULL,   ...,   source = c(\"multi\", \"evds\", \"fred\"),   base = c(\"multi\", \"series\", \"table\"),   debug = FALSE )"},{"path":"/reference/get_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Requests data from multiple data sources. — get_series","text":"index character vector string representing index retrieved. start_date Limits start date data. end_date Limits end date data. freq Frequency data (rarely needed). cache FALSE, new request made; TRUE, cached data used. na.remove TRUE, NA values removed columns NA. verbose TRUE, prints information process; FALSE, silently job. default NULL implies applying default verbose option. function called TRUE FALSE value changes global verbose option vyos package. verbose option FALSE gives warning something goes wrong. ... Additional parameters future versions. source Source \"evds\" \"fred\" internal use version. base Table series source internal use version. debug Debug option development.","code":""},{"path":"/reference/get_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Requests data from multiple data sources. — get_series","text":"S3 object, vyos_GETPREP, generic functions print excel. print generic provides hints user use requested data, creating output excel function examining requested data global environment.","code":""},{"path":"/reference/get_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Requests data from multiple data sources. — get_series","text":"","code":"if (FALSE) { o <- get_series(template_test()) excel(o) object <- get_series(\"UNRATE\", start_date = \"2000/01/01\", na.remove = TRUE) excel(object) }"},{"path":"/reference/grapes-inn-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"%inn% — %inn%","title":"%inn% — %inn%","text":"Checks second parameter includes first one value, column name, name.","code":""},{"path":"/reference/grapes-inn-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"%inn% — %inn%","text":"","code":"x %inn% table"},{"path":"/reference/grapes-inn-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"%inn% — %inn%","text":"x Character check exists vector list. table List, data frame, vector.","code":""},{"path":"/reference/grapes-inn-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"%inn% — %inn%","text":"Logical value TRUE exists, FALSE .","code":""},{"path":"/reference/grapes-inn-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"%inn% — %inn%","text":"","code":".check <- \"a\" %inn% data.frame(a = 1:5)"},{"path":"/reference/inn.html","id":null,"dir":"Reference","previous_headings":"","what":"inn — inn","title":"inn — inn","text":"Checks second parameter includes first one value, column name, name.","code":""},{"path":"/reference/inn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inn — inn","text":"","code":"inn(x, table)"},{"path":"/reference/inn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inn — inn","text":"x Character check exists vector list. table List, data frame, vector.","code":""},{"path":"/reference/inn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"inn — inn","text":"Logical value TRUE exists, FALSE .","code":""},{"path":"/reference/inn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"inn — inn","text":"","code":".check <- inn(\"a\", list(a = 1:5))"},{"path":"/reference/lag_df.html","id":null,"dir":"Reference","previous_headings":"","what":"lag_df — lag_df","title":"lag_df — lag_df","text":"lag_df function creates additional columns based list column names lag sequences. feature beneficial scenarios need varying lag selections certain columns, allowing flexibility specifying different lags different columns opting lag .","code":""},{"path":"/reference/lag_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lag_df — lag_df","text":"","code":"lag_df(df, laglist)"},{"path":"/reference/lag_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lag_df — lag_df","text":"df data.frame tibble. laglist list column names index corresponds column name associated value lag sequence.","code":""},{"path":"/reference/lag_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lag_df — lag_df","text":"tibble","code":""},{"path":"/reference/lag_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"lag_df — lag_df","text":"","code":"df <- data.frame(a = 1:15, b = 2:16) tb <- lag_df(df, laglist = list(a = 1:5, b = 1:3))"},{"path":"/reference/lag_df2.html","id":null,"dir":"Reference","previous_headings":"","what":"lag_df2 — lag_df2","title":"lag_df2 — lag_df2","text":"lag_df2 function creates additional columns based list column names lag sequences. feature beneficial scenarios need varying lag selections certain columns, allowing flexibility specifying different lags different columns opting lag .","code":""},{"path":"/reference/lag_df2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lag_df2 — lag_df2","text":"","code":"lag_df2(df, laglist)"},{"path":"/reference/lag_df2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lag_df2 — lag_df2","text":"df data.frame tibble. laglist list column names index corresponds column name associated value lag sequence.","code":""},{"path":"/reference/lag_df2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lag_df2 — lag_df2","text":"data.frame","code":""},{"path":"/reference/lag_df2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"lag_df2 — lag_df2","text":"","code":"df <- data.frame(a = 1:15, b = 2:16) df2 <- lag_df2(df, laglist = list(a = 1:5, b = 1:3))"},{"path":"/reference/print.vyos_GETPREP.html","id":null,"dir":"Reference","previous_headings":"","what":"print.vyos_GETPREP\nGeneric method for S3 vyos_GETPREP object — print.vyos_GETPREP","title":"print.vyos_GETPREP\nGeneric method for S3 vyos_GETPREP object — print.vyos_GETPREP","text":"print.vyos_GETPREP Generic method S3 vyos_GETPREP object","code":""},{"path":"/reference/print.vyos_GETPREP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.vyos_GETPREP\nGeneric method for S3 vyos_GETPREP object — print.vyos_GETPREP","text":"","code":"# S3 method for vyos_GETPREP print(x, ...)"},{"path":"/reference/print.vyos_GETPREP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.vyos_GETPREP\nGeneric method for S3 vyos_GETPREP object — print.vyos_GETPREP","text":"x S3 vyos_GETPREP object ... arguments passed methods.","code":""},{"path":"/reference/print.vyos_GETPREP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.vyos_GETPREP\nGeneric method for S3 vyos_GETPREP object — print.vyos_GETPREP","text":"S3 vyos_GETPREP object","code":""},{"path":"/reference/print.vyos_GETPREP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.vyos_GETPREP\nGeneric method for S3 vyos_GETPREP object — print.vyos_GETPREP","text":"","code":"if (FALSE) {  obj <- get_series(template_test()) print(obj) }"},{"path":"/reference/remove_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a column or columns from a data.frame. — remove_columns","title":"Remove a column or columns from a data.frame. — remove_columns","text":"Remove column columns data.frame.","code":""},{"path":"/reference/remove_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a column or columns from a data.frame. — remove_columns","text":"","code":"remove_columns(df, column_names, verbose = FALSE)"},{"path":"/reference/remove_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a column or columns from a data.frame. — remove_columns","text":"df Data.frame tibble. column_names Column name column names character vector. verbose Boolean, provides extra information removing column.","code":""},{"path":"/reference/remove_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a column or columns from a data.frame. — remove_columns","text":"Data.frame.","code":""},{"path":"/reference/remove_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a column or columns from a data.frame. — remove_columns","text":"","code":"df <- remove_columns(cars, \"speed\")"},{"path":"/reference/remove_na_safe.html","id":null,"dir":"Reference","previous_headings":"","what":"remove_na_safe — remove_na_safe","title":"remove_na_safe — remove_na_safe","text":"function removes rows ends data frame identifies row columns non-NA values. Starting beginning, removes rows encounters row complete data specific row index (e.g., row 5). proceeds remove rows end data frame, eliminating rows least one NA value column. process stops finds row columns contain non-NA values, resulting data frame returned.","code":""},{"path":"/reference/remove_na_safe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove_na_safe — remove_na_safe","text":"","code":"remove_na_safe(df , verbose = FALSE )"},{"path":"/reference/remove_na_safe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove_na_safe — remove_na_safe","text":"df data.frame remove na rows beginning end verbose give detailed info removing NA values","code":""},{"path":"/reference/remove_na_safe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove_na_safe — remove_na_safe","text":"data.frame returns data.frame removing rows columns NA beginning ","code":""},{"path":"/reference/remove_na_safe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove_na_safe — remove_na_safe","text":"","code":"df <- data.frame(   a = c(NA, 2:7, NA),   b = c(NA, NA, 5, NA, 12, NA, 8, 9) ) df2 <- remove_na_safe(df)"},{"path":"/reference/set_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"set_api_key — set_api_key","title":"set_api_key — set_api_key","text":"set_api_key","code":""},{"path":"/reference/set_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set_api_key — set_api_key","text":"","code":"set_api_key(key = null, source_name = null, option = c(\"env\", \"file\"), ...)"},{"path":"/reference/set_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set_api_key — set_api_key","text":"key api key source source_name evds fred option choice later usage. env file given save api key later use. Default env saves api key environment variable. env default value selected save api key environment variable file selected save api key current folder. ... future versions","code":""},{"path":"/reference/set_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set_api_key — set_api_key","text":"function return value.","code":""},{"path":"/reference/set_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set_api_key — set_api_key","text":"","code":"if (FALSE) {  set_api_key(\"ABCDEFGHIJKLMOP\", \"evds\", \"env\") set_api_key(\"ABCDEFGHIJKLMOP\", \"fred\", \"env\") set_api_key(\"ABCDEFGHIJKLMOP\", \"fred\", \"file\") }"},{"path":"/reference/template_test.html","id":null,"dir":"Reference","previous_headings":"","what":"template_test\ncreates a string template for testing and example purposes — template_test","title":"template_test\ncreates a string template for testing and example purposes — template_test","text":"template_test creates string template testing example purposes","code":""},{"path":"/reference/template_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"template_test\ncreates a string template for testing and example purposes — template_test","text":"","code":"template_test()"},{"path":"/reference/template_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"template_test\ncreates a string template for testing and example purposes — template_test","text":"string template includes ID examples different sources","code":""},{"path":"/reference/template_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"template_test\ncreates a string template for testing and example purposes — template_test","text":"","code":"template_test() #> [1] \"\\n    UNRATE        #fred (series)\\n    bie_abreserv  #evds (table)\\n    TP.AB.B1      #evds (series)\\n    \""},{"path":"/reference/verbose_off.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn Off Verbose Mode — verbose_off","title":"Turn Off Verbose Mode — verbose_off","text":"function turns verbose mode, suppressing additional informational output. useful want limit amount information displayed execution certain operations.","code":""},{"path":"/reference/verbose_off.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn Off Verbose Mode — verbose_off","text":"","code":"verbose_off()"},{"path":"/reference/verbose_off.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn Off Verbose Mode — verbose_off","text":"function return value.","code":""},{"path":"/reference/verbose_off.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn Off Verbose Mode — verbose_off","text":"Verbose mode often used provide detailed information progress function operation. calling verbose_off, can disable additional output. options(\"VYOS_verbose\" = FALSE) line sets verbose option FALSE, silencing additional messages.","code":""},{"path":[]},{"path":"/reference/verbose_off.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn Off Verbose Mode — verbose_off","text":"","code":"verbose_off() #> Verbose mode is already OFF, returning."},{"path":"/reference/verbose_on.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn On Verbose Mode — verbose_on","title":"Turn On Verbose Mode — verbose_on","text":"function turns verbose mode, enabling additional informational output. useful want receive detailed information progress certain operations.","code":""},{"path":"/reference/verbose_on.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn On Verbose Mode — verbose_on","text":"","code":"verbose_on()"},{"path":"/reference/verbose_on.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn On Verbose Mode — verbose_on","text":"function explicit return value.","code":""},{"path":"/reference/verbose_on.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn On Verbose Mode — verbose_on","text":"Verbose mode designed provide detailed information execution function operation. calling verbose_on, can enable additional output. options(\"VYOS_verbose\" = TRUE) line sets verbose option TRUE, allowing functions produce detailed messages.","code":""},{"path":[]},{"path":"/reference/verbose_on.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn On Verbose Mode — verbose_on","text":"","code":"verbose_on() #> Verbose mode is now ON.You will receive additional information during function execution."},{"path":"/reference/vyos-build-checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy examples to check build step — vyos-build-checks","title":"Dummy examples to check build step — vyos-build-checks","text":"page checks examples build process avoid missing","code":""},{"path":"/reference/vyos-build-checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dummy examples to check build step — vyos-build-checks","text":"","code":"obj <- get_series(template_test(), debug = TRUE) x <- print(obj) #>  #> ======================================vyos_GETPREP======= #>   status      : ready_to_run #>   index       :  #>     UNRATE        #fred (series) #>     bie_abreserv  #evds (table) #>     TP.AB.B1      #evds (series) #>      #>   start_date  : 2000-01-01 #>   end_date    : 2100-01-01 #>   status [ready_to_run] #>  #>  lines$data #> =================== #>  ! each line corresponds to a different set of func and data #>     data can be reached as below #>         --> obj$lines$data #>   # A tibble: 3 × 5 #>   index        source base   comments      freq  #>   <chr>        <chr>  <chr>  <chr>         <chr> #> 1 UNRATE       fred   series fred (series) null  #> 2 bie_abreserv evds   table  evds (table)  null  #> 3 TP.AB.B1     evds   series evds (series) null  #>  data #> =================== #>   (combined) data #>  #>     a combined data frame will be constructed #>     combined data can be reached as #>         --> obj$data #>   [no data] #>  #> ========================================================= #>  if (!inherits(x, \"vyos_GETPREP\")) {   stop() }"},{"path":[]},{"path":"/news/index.html","id":"vyos-102","dir":"Changelog","previous_headings":"","what":"vyos 1.0.2","title":"vyos 1.0.2","text":"CRAN release: 2024-02-05 Initial CRAN submission.","code":""}]
